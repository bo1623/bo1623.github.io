---
layout: post
title:      "React Project - The Podcast App"
date:       2019-10-12 11:28:27 -0400
permalink:  react_project_-_the_podcast_app
---


We're finally here! Learning React was fun and it was obvious from the start how React and JSX simplified the job of programmers in creating quicker and more interactive webpages. 

Then came along Redux.... and I was left thinking "Why are we even learning this abominable coding style, with so much boilerplate code (e.g. mapDispatchToProps, mapStateToProps, reducers, etc.), and the introduction of new concepts such as a global store and a Redux state, it was a lot to take in. 

![Confused math lady](https://i.imgflip.com/1c81c1.jpg)

Life seemed much simpler when it was just about creating a local state in a React component and passing down those attributes as props to the component's children.

But as I started working on my final project, I slowly realized how Redux was making my life easier. Here are some stats - my app had: 

* 5 stateless components
* 7 container components
* 10 action creators
* 9 reducers

Now you might be thinking, to what purpose would I need these components and action creators? So let's dive into some of my app features:


Let's start off with my homepage. Over here I've included a short desciption of the app's features and included a "Listen Now" button right below it. This button enables the user to randomly generate a podcast episode by sending a GET fetch request to the API provider ([listennotes.com](https://www.listennotes.com/)) , the returned podcast JSON is then used to update our redux state and render this podcast episode on the DOM

<blockquote class="imgur-embed-pub" lang="en" data-id="zl97ElX"><a href="//imgur.com/zl97ElX">View post on imgur.com</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>

Next, let's have a look at the podcasts index page which the user can navigate to by clicking on the "Podcasts" link in our Navbar. Here we have a list of podcasts generated by genre (I've set the default to Business in this case). One feature that I included is a tooltip, that enables the user to view a description of the podcast channel by hovering over the podcast image. Cool eh? 

<blockquote class="imgur-embed-pub" lang="en" data-id="uYkYnEN"><a href="//imgur.com/uYkYnEN">View post on imgur.com</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>

Now let's say we have a genre of interest, like AI/Data Science or Politics, all we have to do is select a genre from the dropdown list and a new list of relevant podcasts will replace what we had previously. 

<blockquote class="imgur-embed-pub" lang="en" data-id="B4WAzFv"><a href="//imgur.com/B4WAzFv">View post on imgur.com</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>

The user can also log in and build his/her own customized playlist! 

<blockquote class="imgur-embed-pub" lang="en" data-id="KLxhkmF"><a href="//imgur.com/KLxhkmF">View post on imgur.com</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>

Leaving reviews on a specific podcast channel and having those reviews immediately rendered on the DOM

<blockquote class="imgur-embed-pub" lang="en" data-id="swWfcjc"><a href="//imgur.com/swWfcjc">View post on imgur.com</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>

Lastly, here is a gif I made to show you the route changes as I navigate between the homepage, podcasts index page and each podcast channel's show page. 

<blockquote class="imgur-embed-pub" lang="en" data-id="oot6Zdt"><a href="//imgur.com/oot6Zdt">View post on imgur.com</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>


If I had told myself at the beginning of the project that my app would have this many features, I would've scoffed at the thought "how would I be able to accomplish such a monumental task in less than a week?". These were made possible with all the components, actions and reducers above, which in turn were made possible by Redux, turns out Dan Abramov did indeed have our best interests at heart! 

![Cheers](https://www.meme-arsenal.com/memes/5734ed7a96165f46fb5559ebfac03c50.jpg)


## Behind The Scenes
In this post, my main objective is to explain how I built my app by taking advantage of what React and Redux have to offer. For that, I will focus on three specific features of my app, namely how I: 

1. Generated the podcasts index page 
2. Made use of React Routers to toggle seamlessly between webpages 
3. Enable users to log in and save podcast episodes to their playlist and delete them

### Generating The Podcasts' Index Page
First of all, credit where credit's due, producing this app would not have been possible without the help of [listennotes.com](https://www.listennotes.com/)), who offer podcast APIs for free with a very generous limit, so do check them out if you're interested in making use of their services. 

So let's have a look at this post's first piece of code, I guess it makes sense to start with my PodcastsContainer:

```
import React,{Component} from 'react';
import fetchPodcasts from '../actions/fetchPodcasts'
import {connect} from 'react-redux'
import Podcast from '../components/Podcast'
import genre_ids from '../genre_ids'
import PlaylistContainer from './PlaylistContainer'

class PodcastsContainer extends Component{

  componentDidMount(){
    console.log(this.props)
    this.props.clearEpisodes()
    this.props.fetchPodcasts()
  }

  handleOnChange = (event) =>{
    console.log('dropdown list is working')
    const genreId=event.target.value
    this.props.fetchPodcastsWithId(genreId)
  }


  handleOnSubmit = event => {
    event.preventDefault()
    console.log(this.state)
  }

  render(){
    const {isLoggedIn} = this.props
    const sorted_genres=genre_ids.sort((a, b) => (a.name > b.name) ? 1 : -1)
    let podcast
    if(!!this.props.podcasts.podcasts){ //if the podcasts have loaded onto the state successfully then only can we carry out the line below,
      //otherwise an error will be thrown saying map cannot be called on undefined
      podcast=this.props.podcasts.podcasts.map(podcast=><Podcast podcast={podcast}/>)
    }
    return (
      <div>
        <div className="genre-search-bar">
          <label>Filter by genre: </label>
          <select id="genre-search" onChange={this.handleOnChange}>
            <option select="selected"></option>
            {sorted_genres.map(genre=><option value={genre.id}>{genre.name}</option>)}
          </select>
        </div>
        <div className='podcasts-container'>
          <div className='searched-podcasts'>
              {podcast}
          </div>
          <div className='playlist-container'>
            {isLoggedIn ? (
              <div>
                <div classname='title-container'>
                  <h1>Playlist Container</h1>
                </div>
                <div className='playlist-episodes'>
                  <PlaylistContainer />
                </div>
              </div>
            ) : (
              <div></div>
            )}
          </div>
        </div>
      </div>
    )
  }

}

const mapStateToProps = state => {
  return {
    podcasts:state.podcasts,
    isLoggedIn: state.user.isLoggedIn
  }
}

const mapDispatchToProps = dispatch => ({
  fetchPodcasts: () => dispatch(fetchPodcasts()),
  fetchPodcastsWithId: id => dispatch(fetchPodcasts(id)),
  clearEpisodes: () => dispatch({type: "CLEAR_EPISODES"})
})

export default connect(mapStateToProps,mapDispatchToProps)(PodcastsContainer)

```







